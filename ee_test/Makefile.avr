ifndef BAUD_RATE
BAUD_RATE := 115200
endif

ifndef ISP
 ISP = 0
endif

ifeq ($(ISP), 1)
DO_PGM = upload
else
 DO_PGM = hexfile
endif

# 14-Pin ATtiny
t84: PARTNO := t84
t84: MCU := attiny84
ifndef AVR_FREQ
t84: AVR_FREQ := 8000000
endif
t84: $(DO_PGM)

t841: PARTNO := t841
t841: MCU := attiny841
ifndef AVR_FREQ
t841: AVR_FREQ := 8000000
endif
t841: $(DO_PGM)

t44: PARTNO := t44
t44: MCU := attiny44
ifndef AVR_FREQ
t44: AVR_FREQ := 8000000
endif
t44: $(DO_PGM)

t441: PARTNO := t441
t441: MCU := attiny441
ifndef AVR_FREQ
t441: AVR_FREQ := 8000000
endif
t441: $(DO_PGM)

t24: PARTNO := t24
t24: MCU := attiny24
ifndef AVR_FREQ
t24: AVR_FREQ := 8000000
endif
t24: $(DO_PGM)

# 8-Pin ATtiny
t85: PARTNO := t85
t85: MCU := attiny85
ifndef AVR_FREQ
t85: AVR_FREQ := 8000000
endif
t85: BAUD_RATE := 38400
t85: override SOFT_UART := 1
t85: $(DO_PGM)

t45: PARTNO := t45
t45: MCU := attiny45
ifndef AVR_FREQ
t45: AVR_FREQ := 8000000
endif
t45: BAUD_RATE := 38400
t45: override SOFT_UART := 1
t45: $(DO_PGM)

t25: PARTNO := t25
t25: MCU := attiny25
ifndef AVR_FREQ
t25: AVR_FREQ := 8000000
endif
t25: BAUD_RATE := 38400
t25: override SOFT_UART := 1
t25: $(DO_PGM)

# 20-Pin ATtiny
t861: PARTNO := t861
t861: MCU := attiny861
ifndef AVR_FREQ
t861: AVR_FREQ := 8000000
endif
t861: BAUD_RATE := 38400
t861: override SOFT_UART := 1
t861: $(DO_PGM)

t461: PARTNO := t461
t461: MCU := attiny461
ifndef AVR_FREQ
t461: AVR_FREQ := 8000000
endif
t461: BAUD_RATE := 38400
t461: override SOFT_UART := 1
t461: $(DO_PGM)

t261: PARTNO := t261
t261: MCU := attiny261
ifndef AVR_FREQ
t261: AVR_FREQ := 8000000
endif
t261: BAUD_RATE := 38400
t261: override SOFT_UART := 1
t261: $(DO_PGM)

t4313: PARTNO := t4313
t4313: MCU := attiny4313
ifndef AVR_FREQ
t4313: AVR_FREQ := 8000000
endif
t4313: BAUD_RATE := 38400
t4313: $(DO_PGM)

t2313: PARTNO := t2313
t2313: MCU := attiny2313
ifndef AVR_FREQ
t2313: AVR_FREQ := 8000000
endif
t2313: BAUD_RATE := 38400
t2313: $(DO_PGM)

t87: PARTNO := t87
t87: MCU := attiny87
ifndef AVR_FREQ
t87: AVR_FREQ := 8000000
endif
t87: BAUD_RATE := 38400
t87: $(DO_PGM)

t167: PARTNO := t167
t167: MCU := attiny167
ifndef AVR_FREQ
t167: AVR_FREQ := 8000000
endif
t167: BAUD_RATE := 38400
t167: $(DO_PGM)

# 28-Pin ATtiny
t88: PARTNO := t88
t88: MCU := attiny88
ifndef AVR_FREQ
t88: AVR_FREQ := 8000000
endif
t88: BAUD_RATE := 38400
t88: override SOFT_UART := 1
t88: $(DO_PGM)

t48: PARTNO := t48
t48: MCU := attiny48
ifndef AVR_FREQ
t48: AVR_FREQ := 8000000
endif
t48: BAUD_RATE := 38400
t48: override SOFT_UART := 1
t48: $(DO_PGM)

t1634: PARTNO := t1634
t1634: MCU := attiny1634
ifndef AVR_FREQ
t1634: AVR_FREQ := 8000000
endif
t1634: BAUD_RATE := 38400
t1634: $(DO_PGM)


# 28-Pin ATmega
m8: PARTNO := m8
m8: MCU = atmega8
ifndef AVR_FREQ
m8: AVR_FREQ := 16000000
endif
m8: $(DO_PGM)

m48: PARTNO := m48
m48: MCU = atmega48
ifndef AVR_FREQ
m48: AVR_FREQ := 16000000
endif
m48: $(DO_PGM)

m48p: PARTNO := m48p
m48p: MCU = atmega48p
ifndef AVR_FREQ
m48p: AVR_FREQ := 16000000
endif
m48p: $(DO_PGM)

m88: PARTNO := m88
m88: MCU = atmega88
ifndef AVR_FREQ
m88: AVR_FREQ := 16000000
endif
m88: $(DO_PGM)

m168: PARTNO := m168
m168: MCU = atmega168
ifndef AVR_FREQ
m168: AVR_FREQ := 16000000
endif
m168: $(DO_PGM)

m168p: PARTNO := m168p
m168p: MCU = atmega168p
ifndef AVR_FREQ
m168p: AVR_FREQ := 16000000
endif
m168p: $(DO_PGM)

m328: PARTNO := m328
m328: MCU := atmega328
ifndef AVR_FREQ
m328: AVR_FREQ := 16000000
endif
m328: $(DO_PGM)

m328p: PARTNO := m328p
m328p: MCU := atmega328p
ifndef AVR_FREQ
m328p: AVR_FREQ := 16000000
endif
m328p: $(DO_PGM)

# 40-Pin ATmega
m8515: PARTNO := m8515
m8515: MCU = atmega8515
ifndef AVR_FREQ
m8515: AVR_FREQ := 16000000
endif
m8515: $(DO_PGM)

m8535: PARTNO := m8535
m8535: MCU = atmega8535
ifndef AVR_FREQ
m8535: AVR_FREQ := 16000000
endif
m8535: $(DO_PGM)

m16: PARTNO := m16
m16: MCU = atmega16
ifndef AVR_FREQ
m16: AVR_FREQ := 16000000
endif
m16: $(DO_PGM)

m8u2: PARTNO := m8u2
m8u2: MCU = atmega8u2
ifndef AVR_FREQ
m8u2: AVR_FREQ := 8000000
endif
m8u2: $(DO_PGM)

m16u2: PARTNO := m16u2
m16u2: MCU = atmega16u2
ifndef AVR_FREQ
m16u2: AVR_FREQ := 8000000
endif
m16u2: $(DO_PGM)

m32u2: PARTNO := m32u2
m32u2: MCU = atmega32u2
ifndef AVR_FREQ
m32u2: AVR_FREQ := 8000000
endif
m32u2: $(DO_PGM)

m16u4: PARTNO := m16u4
m16u4: MCU = atmega16u4
ifndef AVR_FREQ
m16u4: AVR_FREQ := 8000000
endif
m16u4: $(DO_PGM)

m32u4: PARTNO := m32u4
m32u4: MCU = atmega32u4
ifndef AVR_FREQ
m32u4: AVR_FREQ := 8000000
endif
m32u4: $(DO_PGM)

m162: PARTNO := m162
m162: MCU = atmega162
ifndef AVR_FREQ
m162: AVR_FREQ := 16000000
endif
m162: $(DO_PGM)

m163: PARTNO := m163
m163: MCU = atmega163
ifndef AVR_FREQ
m163: AVR_FREQ := 16000000
endif
m163: $(DO_PGM)

m164p: PARTNO := m164p
m164p: MCU = atmega164p
ifndef AVR_FREQ
m164p: AVR_FREQ := 16000000
endif
m164p: $(DO_PGM)

m32: PARTNO := m32
m32: MCU = atmega32
ifndef AVR_FREQ
m32: AVR_FREQ := 16000000
endif
m32: $(DO_PGM)

m323: PARTNO := m323
m323: MCU = atmega323
ifndef AVR_FREQ
m323: AVR_FREQ := 16000000
endif
m323: $(DO_PGM)

m324: PARTNO := m324
m324: MCU = atmega324
ifndef AVR_FREQ
m324: AVR_FREQ := 16000000
endif
m324: $(DO_PGM)

m324p: PARTNO := m324p
m324p: MCU = atmega324p
ifndef AVR_FREQ
m324p: AVR_FREQ := 16000000
endif
m324p: $(DO_PGM)

m644: PARTNO := m644
m644: MCU := atmega644
ifndef AVR_FREQ
m644: AVR_FREQ := 16000000
endif
m644: $(DO_PGM)

m644p: PARTNO := m644p
m644p: MCU := atmega644p
ifndef AVR_FREQ
m644p: AVR_FREQ := 16000000
endif
m644p: $(DO_PGM)

m1284p: PARTNO := m1284p
m1284p: MCU := atmega1284p
ifndef AVR_FREQ
m1284p: AVR_FREQ := 16000000
endif
m1284p: $(DO_PGM)

m645: PARTNO := m645
m645: MCU := atmega645
ifndef AVR_FREQ
m645: AVR_FREQ := 16000000
endif
m645: $(DO_PGM)

m645p: PARTNO := m645p
m645p: MCU := atmega645p
ifndef AVR_FREQ
m645p: AVR_FREQ := 16000000
endif
m645p: $(DO_PGM)

m325: PARTNO := m325
m325: MCU := atmega325
ifndef AVR_FREQ
m325: AVR_FREQ := 16000000
endif
m325: $(DO_PGM)

m325p: PARTNO := m325p
m325p: MCU := atmega325p
ifndef AVR_FREQ
m325p: AVR_FREQ := 16000000
endif
m325p: $(DO_PGM)

m165: PARTNO := m165
m165: MCU := atmega165
ifndef AVR_FREQ
m165: AVR_FREQ := 16000000
endif
m165: $(DO_PGM)

m165p: PARTNO := m165p
m165p: MCU := atmega165p
ifndef AVR_FREQ
m165p: AVR_FREQ := 16000000
endif
m165p: $(DO_PGM)

# 64-Pin ATmega
m169: PARTNO := m169
m169: MCU = atmega169
ifndef AVR_FREQ
m169: AVR_FREQ := 16000000
endif
m169: $(DO_PGM)

m169p: PARTNO := m169p
m169p: MCU = atmega169p
ifndef AVR_FREQ
m169p: AVR_FREQ := 16000000
endif
m169p: $(DO_PGM)

m329: PARTNO := m329
m329: MCU := atmega329
ifndef AVR_FREQ
m329: AVR_FREQ := 16000000
endif
m329: $(DO_PGM)

m329p: PARTNO := m329p
m329p: MCU := atmega329p
ifndef AVR_FREQ
m329p: AVR_FREQ := 16000000
endif
m329p: $(DO_PGM)

m649: PARTNO := m649
m649: MCU := atmega649
ifndef AVR_FREQ
m649: AVR_FREQ := 16000000
endif
m649: $(DO_PGM)

m649p: PARTNO := m649p
m649p: MCU := atmega649p
ifndef AVR_FREQ
m649p: AVR_FREQ := 16000000
endif
m649p: $(DO_PGM)

m64: PARTNO := m64
m64: MCU := atmega64
ifndef AVR_FREQ
m64: AVR_FREQ := 16000000
endif
m64: $(DO_PGM)

m128: PARTNO := m128
m128: MCU := atmega128
ifndef AVR_FREQ
m128: AVR_FREQ := 16000000
endif
m128: $(DO_PGM)

m1281: PARTNO := m1281
m1281: MCU := atmega1281
ifndef AVR_FREQ
m1281: AVR_FREQ := 16000000
endif
m1281: $(DO_PGM)

# 100-Pin ATmega
m3290: PARTNO := m3290
m3290: MCU := atmega3290
ifndef AVR_FREQ
m3290: AVR_FREQ := 16000000
endif
m3290: $(DO_PGM)

m3290p: PARTNO := m3290p
m3290p: MCU := atmega3290p
ifndef AVR_FREQ
m3290p: AVR_FREQ := 16000000
endif
m3290p: $(DO_PGM)

m640: PARTNO := m640
m640: MCU := atmega640
ifndef AVR_FREQ
m640: AVR_FREQ := 16000000
endif
m640: $(DO_PGM)

m6490: PARTNO := m6490
m6490: MCU := atmega6490
ifndef AVR_FREQ
m6490: AVR_FREQ := 16000000
endif
m6490: $(DO_PGM)

m6490p: PARTNO := m6490p
m6490p: MCU := atmega6490p
ifndef AVR_FREQ
m6490p: AVR_FREQ := 16000000
endif
m6490p: $(DO_PGM)

m6450: PARTNO := m6450
m6450: MCU := atmega6450
ifndef AVR_FREQ
m6450: AVR_FREQ := 16000000
endif
m6450: $(DO_PGM)

m6450a: PARTNO := m6450a
m6450a: MCU := atmega6450a
ifndef AVR_FREQ
m6450a: AVR_FREQ := 16000000
endif
m6450a: $(DO_PGM)

m6450p: PARTNO := m6450p
m6450p: MCU := atmega6450p
ifndef AVR_FREQ
m6450p: AVR_FREQ := 16000000
endif
m6450p: $(DO_PGM)

m1280: PARTNO := m1280
m1280: MCU := atmega1280
ifndef AVR_FREQ
m1280: AVR_FREQ := 16000000
endif
m1280: $(DO_PGM)

m1281: PARTNO := m1281
m1281: MCU := atmega1281
ifndef AVR_FREQ
m1281: AVR_FREQ := 16000000
endif
m1281: $(DO_PGM)

m2560: PARTNO := m2560
m2560: MCU := atmega2560
ifndef AVR_FREQ
m2560: AVR_FREQ := 16000000
endif
m2560: $(DO_PGM)

m2561: PARTNO := m2561
m2561: MCU := atmega2561
ifndef AVR_FREQ
m2561: AVR_FREQ := 16000000
endif
m2561: $(DO_PGM)

at90pwm2: PARTNO := at90pwm2
at90pwm2: MCU := at90pwm2
ifndef AVR_FREQ
at90pwm2: AVR_FREQ := 16000000
endif
at90pwm2: $(DO_PGM)

at90pwm2b: PARTNO := at90pwm2b
at90pwm2b: MCU := at90pwm2b
ifndef AVR_FREQ
at90pwm2b: AVR_FREQ := 16000000
endif
at90pwm2b: $(DO_PGM)

at90pwm3: PARTNO := at90pwm3
at90pwm3: MCU := at90pwm3
ifndef AVR_FREQ
at90pwm3: AVR_FREQ := 16000000
endif
at90pwm3: $(DO_PGM)

at90pwm3b: PARTNO := at90pwm3b
at90pwm3b: MCU := at90pwm3b
ifndef AVR_FREQ
at90pwm3b: AVR_FREQ := 16000000
endif
at90pwm3b: $(DO_PGM)

at90can128: PARTNO := at90can128
at90can128: MCU := at90can128
ifndef AVR_FREQ
at90can128: AVR_FREQ := 16000000
endif
at90can128: $(DO_PGM)

at90can64: PARTNO := at90can64
at90can64: MCU := at90can64
ifndef AVR_FREQ
at90can64: AVR_FREQ := 16000000
endif
at90can64: $(DO_PGM)

at90can32: PARTNO := at90can32
at90can32: MCU := at90can32
ifndef AVR_FREQ
at90can32: AVR_FREQ := 16000000
endif
at90can32: $(DO_PGM)
