#
# Makefile for tiny AVR chips
#
# * Copyright 2013-2015 by Bill Westfield.  Part of Optiboot.
# * reorganized and extended 2017 by K.-H. Kuebbeler
# * This software is licensed under version 2 of the Gnu Public Licence.
# * See optiboot.c for details.
#
#
#
SUB_MAKE = @make --no-print-directory
#
# ATtiny84
################################################
# generic attiny84
# let board specific change the frequency and fuses
attiny84: TARGET := attiny84
attiny84: override MCU_TARGET := attiny84
attiny84: override FLASH_SIZE := 8192
attiny84: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny84 to prevent unaligned Start-Address
attiny84: override BOOT_PAGE_LEN := 64
attiny84: override VIRTUAL_BOOT_PARTITION = 1
ifndef AVR_FREQ
attiny84: AVR_FREQ := 8000000
endif
ifndef BAUD_RATE
attiny84: BAUD_RATE := 57600
endif
ifndef HFUSE
## Brownout disabled
#attiny84: HFUSE := DF
# Brownout 2.7V
attiny84:  HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal oscillator, slowly rising power
#attiny84: LFUSE := E2
## 8MHz internal oscillator, slowly rising power, Clock out
#attiny84: LFUSE := A2
# 8MHz crystal, slowly rising power
attiny84: LFUSE := FF
endif
ifndef EFUSE
# Self-programming enable
attiny84: EFUSE := FE
endif
attiny84: SOFT_UART := 1
export
attiny84:
	$(SUB_MAKE) hex_file
#
# ATtiny44
################################################
# let board specific change the frequency and fuses
attiny44: TARGET := attiny44
attiny44: override MCU_TARGET := attiny44
attiny44: override FLASH_SIZE := 4096
attiny44: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny84 to prevent unaligned Start-Address
attiny44: override BOOT_PAGE_LEN := 64
attiny44: override VIRTUAL_BOOT_PARTITION = 1
ifndef AVR_FREQ
attiny44: AVR_FREQ := 8000000
endif
ifndef BAUD_RATE
attiny44: BAUD_RATE := 57600
endif
ifndef HFUSE
# Brownout 2.7V
attiny44:  HFUSE := DD
endif
ifndef LFUSE
# 8MHz crystal, slowly rising power
attiny44: LFUSE := FF
endif
ifndef EFUSE
# Self-programming enable
attiny44: EFUSE := FE
endif
attiny44: SOFT_UART := 1
export
attiny44:
	$(SUB_MAKE) hex_file
#
# ATtiny24
################################################
# let board specific change the frequency and fuses
attiny24: TARGET := attiny24
attiny24: override MCU_TARGET := attiny24
attiny24: override FLASH_SIZE := 2048
attiny24: override FLASH_PAGE_SIZE := 32
# use the flash page size of tiny84 to prevent unaligned Start-Address
attiny24: override BOOT_PAGE_LEN := 32
attiny24: override VIRTUAL_BOOT_PARTITION = 1
ifndef AVR_FREQ
attiny24: AVR_FREQ := 8000000
endif
ifndef BAUD_RATE
attiny24: BAUD_RATE := 57600
endif
ifndef HFUSE
# Brownout 2.7V
attiny24:  HFUSE := DD
endif
ifndef LFUSE
# 8MHz crystal, slowly rising power
attiny24: LFUSE := FF
endif
ifndef EFUSE
# Self-programming enable
attiny24: EFUSE := FE
endif
attiny24: SOFT_UART := 1
export
attiny24:
	$(SUB_MAKE) hex_file
#
# ATtiny841
################################################
# generic attiny841
# let board specific change the frequency and fuses
attiny841: TARGET := attiny841
attiny841: override MCU_TARGET := attiny841
attiny841: override FLASH_SIZE := 8192
attiny841: override FLASH_PAGE_SIZE := 16
# use the flash page size of tiny841 to prevent unaligned Start-Address
# but tiny841 with a 16 byte page size can only erase 4 pages (64 byte)
attiny841: override FLASH_ERASE_CNT = 4
attiny841: override BOOT_PAGE_LEN := 64
attiny841: override VIRTUAL_BOOT_PARTITION = 1
ifndef AVR_FREQ
attiny841: AVR_FREQ := 8000000
endif
ifndef BAUD_RATE
attiny841: BAUD_RATE := 57600
endif
ifndef HFUSE
## Brownout disabled
#attiny841: HFUSE := DF
# Brownout 2.7V
attiny841:  HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal oscillator, slowly rising power
#attiny841: LFUSE := E2
## 8MHz internal oscillator, slowly rising power, Clock out
#attiny841: LFUSE := A2
# 8MHz crystal, slowly rising power
attiny841: LFUSE := EF
endif
ifndef EFUSE
# Self-programming enable
attiny841: EFUSE := FE
endif
export
attiny841:
	$(SUB_MAKE) hex_file
#
# ATtiny441
################################################
# generic attiny441
# let board specific change the frequency and fuses
attiny441: TARGET := attiny441
attiny441: override MCU_TARGET := attiny441
attiny441: override FLASH_SIZE := 4096
attiny441: override FLASH_PAGE_SIZE := 16
# use the flash page size of tiny841 to prevent unaligned Start-Address
# but tiny441 with a 16 byte page size, can only erase 4 pages (64 byte)
attiny441: override FLASH_ERASE_CNT = 4
attiny441: override BOOT_PAGE_LEN := 64
attiny441: override VIRTUAL_BOOT_PARTITION = 1
ifndef AVR_FREQ
attiny441: AVR_FREQ := 8000000
endif
ifndef BAUD_RATE
attiny441: BAUD_RATE := 57600
endif
ifndef HFUSE
## Brownout disabled
#attiny84: HFUSE := DF
# Brownout 2.7V
attiny441:  HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal oscillator, slowly rising power
#attiny441: LFUSE := E2
## 8MHz internal oscillator, slowly rising power, Clock out
#attiny441: LFUSE := A2
# 8MHz crystal, slowly rising power
attiny441: LFUSE := EF
endif
ifndef EFUSE
# Self-programming enable
attiny441: EFUSE := FE
endif
export
attiny441:
	$(SUB_MAKE) hex_file

#
# ATtiny85
################################################
# generic attiny85
# let board specific change the frequency and fuses
attiny85: TARGET := attiny85
attiny85: override MCU_TARGET := attiny85
attiny85: override FLASH_SIZE := 8192
attiny85: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny85 to prevent unaligned Start-Address
attiny85: override BOOT_PAGE_LEN := 64
attiny85: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny85: AVR_FREQ := 8000000
endif

ifndef HFUSE
# Brownout 2.7V
attiny85: HFUSE := DD
endif
ifndef LFUSE
# 16MHz PLL internal, 14CK + 64ms
# attiny85: LFUSE := F1
# 16MHz/8=2MHz PLL internal, 14CK + 64ms
# attiny85: LFUSE := 71
# 8MHz internal, 6CK/14CK + 64ms
attiny85: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny85: EFUSE := FE
endif
attiny85: SOFT_UART := 1
attiny85: BAUD_RATE := 38400
export
attiny85: 
	$(SUB_MAKE) hex_file
#
# ATtiny45
################################################
# let board specific change the frequency and fuses
attiny45: TARGET := attiny45
attiny45: override MCU_TARGET := attiny45
attiny45: override FLASH_SIZE := 4096
attiny45: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny85 to prevent unaligned Start-Address
attiny45: override BOOT_PAGE_LEN := 64
attiny45: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny45: AVR_FREQ := 8000000
endif

ifndef HFUSE
# Brownout 2.7V
attiny45: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny45: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny45: EFUSE := FE
endif
attiny45: SOFT_UART := 1
attiny45: BAUD_RATE := 38400
export
attiny45: 
	$(SUB_MAKE) hex_file
#
# ATtiny25
################################################
# let board specific change the frequency and fuses
attiny25: TARGET := attiny25
attiny25: override MCU_TARGET := attiny25
attiny25: override FLASH_SIZE := 2048
attiny25: override FLASH_PAGE_SIZE := 32
# use the flash page size of tiny85 to prevent unaligned Start-Address
attiny25: override BOOT_PAGE_LEN := 32
attiny25: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny25: AVR_FREQ := 8000000
endif

ifndef HFUSE
# Brownout 2.7V
attiny25: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny25: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny25: EFUSE := FE
endif
attiny25: SOFT_UART := 1
attiny25: BAUD_RATE := 38400
export
attiny25: 
	$(SUB_MAKE) hex_file

#
# ATtiny88
################################################
# generic attiny88
# let board specific change the frequency and fuses
attiny88: TARGET := attiny88
attiny88: override MCU_TARGET := attiny88
attiny88: override FLASH_SIZE := 8192
attiny88: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny88 to prevent unaligned Start-Address
attiny88: override BOOT_PAGE_LEN := 64
attiny88: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny88: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny88: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny88: LFUSE := EE
endif
ifndef EFUSE
# Self-programming enable
attiny88: EFUSE := FE
endif
attiny88: SOFT_UART := 1
export
attiny88:
	$(SUB_MAKE) hex_file

#
# ATtiny48
################################################
# generic attiny48
# let board specific change the frequency and fuses
attiny48: TARGET := attiny48
attiny48: override MCU_TARGET := attiny48
attiny48: override FLASH_SIZE := 4096
attiny48: override FLASH_PAGE_SIZE := 64
# use the flash page size of tiny48 to prevent unaligned Start-Address
attiny48: override BOOT_PAGE_LEN := 64
attiny48: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny48: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny48: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny48: LFUSE := EE
endif
ifndef EFUSE
# Self-programming enable
attiny48: EFUSE := FE
endif
attiny48: SOFT_UART := 1
export
attiny48:
	$(SUB_MAKE) hex_file

#
# ATtiny87
################################################
# generic attiny87
attiny87: TARGET := attiny87
attiny87: override MCU_TARGET := attiny87
attiny87: override FLASH_SIZE := 8192
attiny87: override FLASH_PAGE_SIZE := 128
# use the flash page size of tiny87 to prevent unaligned Start-Address
attiny87: override BOOT_PAGE_LEN := 128
attiny87: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny87: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny87: HFUSE := DD
endif
ifndef LFUSE
# 8MHz Crystal, 16k/14CK + 64ms = 0xff
# 8MHz RC, 16CK/14CK + 64ms
attiny87: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny87: EFUSE := FE
endif
export
attiny87:
	$(SUB_MAKE) hex_file

#
# ATtiny167
################################################
# generic attiny167
attiny167: TARGET := attiny167
attiny167: override MCU_TARGET := attiny167
attiny167: override FLASH_SIZE := 16384
attiny167: override FLASH_PAGE_SIZE := 128
# use the flash page size of tiny87 to prevent unaligned Start-Address
attiny167: override BOOT_PAGE_LEN := 128
attiny167: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny167: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny167: HFUSE := DD
endif
ifndef LFUSE
# 8MHz Crystal, 16k/14CK + 64ms = 0xff
# 8MHz RC, 16CK/14CK + 64ms
attiny167: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny167: EFUSE := FE
endif
export
attiny167:
	$(SUB_MAKE) hex_file

# generic atmega48   has no Bootloader Page
# let board specific change the frequency and fuses
atmega48: TARGET := atmega48
atmega48: override MCU_TARGET := atmega48
atmega48: override FLASH_SIZE := 4096
atmega48: override FLASH_PAGE_SIZE := 64
# use the flash page size of mega48 to prevent unaligned Start-Address
atmega48: override BOOT_PAGE_LEN := 64
atmega48: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
atmega48: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
atmega48: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
atmega48: LFUSE := EE
endif
ifndef EFUSE
# Self-programming enable
atmega48: EFUSE := FE
endif
export
atmega48:
	$(SUB_MAKE) hex_file

# generic atmega48p   has no Bootloader Page
# let board specific change the frequency and fuses
atmega48p: TARGET := atmega48p
atmega48p: override MCU_TARGET := atmega48p
atmega48p: override FLASH_SIZE := 4096
atmega48p: override FLASH_PAGE_SIZE := 64
# use the flash page size of mega48 to prevent unaligned Start-Address
atmega48p: override BOOT_PAGE_LEN := 64
atmega48p: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
atmega48p: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
atmega48p: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
atmega48p: LFUSE := EE
endif
ifndef EFUSE
# Self-programming enable
atmega48p: EFUSE := FE
endif
export
atmega48p:
	$(SUB_MAKE) hex_file

#
# ATtiny861
################################################
# generic attiny861
# let board specific change the frequency and fuses
attiny861: TARGET := attiny861
attiny861: override MCU_TARGET := attiny861
attiny861: override FLASH_SIZE := 8192
attiny861: override FLASH_PAGE_SIZE := 64
attiny861: override BOOT_PAGE_LEN := 64
attiny861: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny861: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny861: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny861: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny861: EFUSE := FE
endif
attiny861: SOFT_UART := 1
export
attiny861:
	$(SUB_MAKE) hex_file

#
# ATtiny461
################################################
# generic attiny461
# let board specific change the frequency and fuses
attiny461: TARGET := attiny461
attiny461: override MCU_TARGET := attiny461
attiny461: override FLASH_SIZE := 4096
attiny461: override FLASH_PAGE_SIZE := 64
attiny461: override BOOT_PAGE_LEN := 64
attiny461: override VIRTUAL_BOOT_PARTITION := 1
ifndef AVR_FREQ
attiny461: AVR_FREQ := 8000000
endif
ifndef HFUSE
# Brownout 2.7V
attiny461: HFUSE := DD
endif
ifndef LFUSE
# 8MHz internal, 6CK/14CK + 64ms
attiny461: LFUSE := E2
endif
ifndef EFUSE
# Self-programming enable
attiny461: EFUSE := FE
endif
attiny461: SOFT_UART := 1
export
attiny461:
	$(SUB_MAKE) hex_file

#
# ATtiny261
################################################
# generic attiny261
# let board specific change the frequency and fuses
attiny261: TARGET := attiny261
attiny261: MCU_TARGET := attiny261
#ifndef HFUSE
## Brownout 2.7V
#attiny261: HFUSE := DD
#endif
#ifndef LFUSE
## 8MHz internal, 6CK/14CK + 64ms
#attiny261: LFUSE := E2
#endif
#ifndef EFUSE
## Self-programming enable
#attiny261: EFUSE := FE
#endif
attiny261: SOFT_UART := 1
attiny261: hex_file


#
# ATtiny1634
################################################
# generic attiny1634
# let board specific change the frequency and fuses
attiny1634: TARGET := attiny1634
attiny1634: MCU_TARGET := attiny1634
# use the flash page size of tiny1634 to prevent unaligned Start-Address
# but tiny1634 with a 32 byte page size, can only erase 4 pages (64 byte)
#ifndef AVR_FREQ
#attiny1634: AVR_FREQ := 8000000
#endif
#ifndef HFUSE
## Brownout 2.7V
#attiny1634: HFUSE := DD
#endif
#ifndef LFUSE
## 8MHz internal, 6CK + 16ms, no DIV8
#attiny1634: LFUSE := E2
#endif
#ifndef EFUSE
## Self-programming enable
#attiny1634: EFUSE := FE
#endif
attiny1634: hex_file

#
# ATtiny4313
################################################
# generic attiny4313
# let board specific change the frequency and fuses
attiny4313: TARGET := attiny4313
attiny4313: MCU_TARGET := attiny4313
#ifndef HFUSE
## Brownout 2.7V
#attiny4313: HFUSE := DD
#endif
#ifndef LFUSE
## 8MHz internal, 6CK + 16ms, no DIV8
#attiny4313: LFUSE := E4
#endif
#ifndef EFUSE
## Self-programming enable
#attiny4313: EFUSE := FE
#endif
attiny4313: hex_file
#
# ATtiny2313
################################################
# let board specific change the frequency and fuses
attiny2313: TARGET := attiny2313
attiny2313: MCU_TARGET := attiny2313
#ifndef HFUSE
## Brownout 2.7V
#attiny2313: HFUSE := DD
#endif
#ifndef LFUSE
## 8MHz internal, 6CK + 16ms, no DIV8
#attiny2313: LFUSE := E4
#endif
#ifndef EFUSE
## Self-programming enable
#attiny2313: EFUSE := FE
#endif
attiny2313: LED_START_FLASHES := 0
attiny2313: hex_file


# 1MHz clocked platforms/boards
#
# These are capable of 9600 baud
#

luminet: TARGET := luminet
luminet: MCU_TARGET := attiny84
luminet: AVR_FREQ := 1000000
# 1MHz internal oscillator, slowly rising power, requires AVR_FREQ set to 1000000
luminet: LFUSE := 62
luminet: BAUD_RATE := 9600
luminet: LED_START_FLASHES := 0
luminet: hex_file

digispark_t167: TARGET := digispark_t167
digispark_t167: MCU_TARGET := attiny167
digispark_t167: AVR_FREQ := 16000000
digispark_t167: LFUSE := DF
digispark_t167: LED := B1
digispark_t167: BAUD_RATE := 52
digispark_t167: hex_file

