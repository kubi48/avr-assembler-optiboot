
optiboot.elf:     Dateiformat elf32-avr

Sektionen:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .version      00000002  00001ffe  00001ffe  00000252  2**0
                  CONTENTS, READONLY
  1 .text         000001de  00001e00  00001e00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .data         00000000  00800060  00001fde  00000252  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .stab         00000b88  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000048  00000000  00000000  00000ddc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00001e00 <__ctors_end>:
	.section .text
	.func optiboot
	.global optiboot

optiboot:
	cli
    1e00:	f8 94       	cli
	eor	r1, r1
    1e02:	11 24       	eor	r1, r1
  #define RAM_END_OFFSET 256	/* predefined RAMEND doesn't work */
 #else
  #define RAM_END_OFFSET 0
 #endif

	ldi	r24,hi8(RAMEND-RAM_END_OFFSET)
    1e04:	84 e0       	ldi	r24, 0x04	; 4
	AOUT	SPH, r24
    1e06:	8e bf       	out	0x3e, r24	; 62
	ldi	r24,lo8(RAMEND-RAM_END_OFFSET)
    1e08:	8f e5       	ldi	r24, 0x5F	; 95
	AOUT	SPL, r24
    1e0a:	8d bf       	out	0x3d, r24	; 61
   * still use the watchdog to reset the bootloader too.
   */

//#define marker (*(uint32_t *) (RAMEND - 16 - 3))

	AIN	r2, MCUCSR
    1e0c:	24 b6       	in	r2, 0x34	; 52
;	clr	r1
	AOUT	MCUCSR, r1	; MCUCSR = 0
    1e0e:	14 be       	out	0x34, r1	; 52
	AOUT	RESET_CAUSE, r2	; save reason of restart (MCUCSR) in IO register
    1e10:	23 bc       	out	0x23, r2	; 35
#else		/* no FORCE_WATCHDOG */
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
 #if TEST_OUTPUT == 0
	ldi	r24, (1<<WDRF)|(1<<PORF)|(1<<BORF)  ;0x0D
    1e12:	8d e0       	ldi	r24, 0x0D	; 13
	and	r24, r2		; r2 hold the reset reason , MCUCSR
    1e14:	82 21       	and	r24, r2
		; none of the WatchDog, PowerOn or BrownOut reason ?
	breq	try_loader	; interrupt must be caused by a external reset
    1e16:	29 f0       	breq	.+10     	; 0x1e22 <try_loader>

00001e18 <appStart>:
#if (defined(__AVR_ATtiny841__) || defined(__AVR_ATtiny441__) || defined(__AVR_ATtiny1634__)) && (WATCHDOG_TIME == WATCHDOG_OFF)
	ldi	r21, 0xD8	; special signature to change protected I/O register
	AOUT	CCP, r21
	AOUT	WDTCSR, r1	; clear watchdog timer
#else
	ldi	r20, WATCHDOG_TIME	; _OFF or _4S depending on FORCE_WATCHDOG
    1e18:	40 e0       	ldi	r20, 0x00	; 0
	rcall	watchdogConfig		; WATCHDOG_OFF (or _4S if FORCE_WATCHDOG)
    1e1a:	da d0       	rcall	.+436    	; 0x1fd0 <watchdogConfig>

#if	VIRTUAL_BOOT_PARTITION > 0
	ldi	ZL, save_vect_addr/2		; // Jump to WDT vector (jmp or rjmp table)
	eor	ZH, ZH
#else
       	eor	ZL, ZL	; // Jump to RST vector	 0x0000
    1e1c:	ee 27       	eor	r30, r30
      	eor	ZH, ZH
    1e1e:	ff 27       	eor	r31, r31
#endif
       	ijmp
    1e20:	09 94       	ijmp

00001e22 <try_loader>:
	ldi	r20, WATCHDOG_1S	;0x0E
 #else
	ldi	r20, WATCHDOG_500MS	;
 #endif
#else
	ldi	r20, WATCHDOG_1S	;0x0E	(default value)
    1e22:	4e e0       	ldi	r20, 0x0E	; 14
#endif
	rcall	watchdogConfig
    1e24:	d5 d0       	rcall	.+426    	; 0x1fd0 <watchdogConfig>
#endif

#if FLASHEND > 0x1ffff
	clr	r3			; reset mode
#endif
	ldi	r18, lo8(RAMSTART)	; r18:r19 = RAMSTART
    1e26:	20 e6       	ldi	r18, 0x60	; 96
	ldi	r19, hi8(RAMSTART)	; 
    1e28:	30 e0       	ldi	r19, 0x00	; 0

00001e2a <next_try>:

next_try:
#if ((LED_DATA_FLASH & 0x01) > 0) && defined(LED_PORT) && defined(LEDbit)
	ASBI	LED_PORT, LEDbit
#endif
	wdr				; watchdog timer reset
    1e2a:	a8 95       	wdr

00001e2c <wt_rx0low>:
wt_rx0low:
#if INVERSE_UART > 0
	ASBIC	UART_RX_PIN, UART_RX_BIT	; Look if RX is still high
#else
	ASBIS	UART_RX_PIN, UART_RX_BIT	; Look if RX is still low
    1e2c:	80 9b       	sbis	0x10, 0	; 16
#endif
	rjmp	wt_rx0low			; wait for at least one 1 read
    1e2e:	fe cf       	rjmp	.-4      	; 0x1e2c <wt_rx0low>

00001e30 <RX_was_high>:
 #define TIFR1 TIFR
#endif


#if SOFT_UART == 0
	ldi	r24, UART_SCALER8	; double speed mode
    1e30:	82 e0       	ldi	r24, 0x02	; 2
	AOUT	UART_CNTL, r24		; set UART scaler to 8, double speed
    1e32:	8b b9       	out	0x0b, r24	; 11
   ; prepare the UART
 #if defined(UART_SRC) && defined(UART_SEL)
	; version for m8, m16, m32 for example (with double function UCSRC)
	ldi	r23, (1<<UART_SEL)|(TWO_STOP_BITS<<USBS0)|(1<<UCSZ01)|(1<<UCSZ00)	;config UART U8N2
    1e34:	7e e8       	ldi	r23, 0x8E	; 142
	AOUT	UART_SRC, r23
    1e36:	70 bd       	out	0x20, r23	; 32
  ; prepare the counter 1
 #if (CounterClockDiv == 8) && defined(GTCCR)
	ldi	r24, (1<<TSM)|(1<<PSRSYNC)
        AOUT    GTCCR, r24		; reset Prescaler, stop Counters
 #else
	AOUT	CNT16_CCRB, r1		; Stop counter 1 
    1e38:	1e bc       	out	0x2e, r1	; 46
 #endif
	AOUT	CNT16_CNTH, r1		; set initial counter to 0
    1e3a:	1d bc       	out	0x2d, r1	; 45
	AOUT	CNT16_CNTL, r1
    1e3c:	1c bc       	out	0x2c, r1	; 44
; wait, if the UART-RX-Bit is low
 #if (CounterClockDiv == 8) && defined(GTCCR)
        ldi	r24, START_COUNTER_COMMAND      ; start counter with /8 scaler, but is still stopped
	AOUT	CNT16_CCRB, r24		; Start counter 1 with /8 scaler for 9-Bit measure, still stopped
 #else
	ldi	r24, START_COUNTER_COMMAND	; start command for counter with /8 scaler or full speed
    1e3e:	81 e0       	ldi	r24, 0x01	; 1

00001e40 <wt_rx0l>:
 #endif
wt_rx0l:
 #if INVERSE_UART > 0
	ASBIS	UART_RX_PIN, UART_RX_BIT	; Look if RX is still low, INVERSE
 #else
	ASBIC	UART_RX_PIN, UART_RX_BIT	; Look if RX is still high
    1e40:	80 99       	sbic	0x10, 0	; 16
 #endif
	rjmp	wt_rx0l
    1e42:	fe cf       	rjmp	.-4      	; 0x1e40 <wt_rx0l>

00001e44 <wt_rx1s>:
 #endif
wt_rx1s:
 #if INVERSE_UART > 0
	ASBIC	UART_RX_PIN, UART_RX_BIT	; Look if RX is still high
 #else
	ASBIS	UART_RX_PIN, UART_RX_BIT	; Look if RX is still low
    1e44:	80 9b       	sbis	0x10, 0	; 16
 #endif
	rjmp	wt_rx1s
    1e46:	fe cf       	rjmp	.-4      	; 0x1e44 <wt_rx1s>
	; begin of first "1" data bit is found after S0000, if it was a STK_GET_SYNC, 0x30
 #if (Bits2Measure == 2) || (Bits2Measure == 4)
  #if (CounterClockDiv == 8) && defined(GTCCR)
	AOUT	GTCCR, r1		; start prescaler and counters
  #else
	AOUT	CNT16_CCRB, r24		; Start counter 1 with or without /8 scaler for 2-Bit or 4-Bit measure
    1e48:	8e bd       	out	0x2e, r24	; 46
 #if BAUD_RATE > 39
	; the optional time-limit check is only done, if the BAUD_RATE is set > 39 
  #if TIFR1 < (0x20 + __SFR_OFFSET)
	sbi	_SFR_IO_ADDR(TIFR1), TOVFLAG	; Clear Timer OV Flag
  #else
	ldi	r26, (1<<TOVFLAG)
    1e4a:	a4 e0       	ldi	r26, 0x04	; 4
	AOUT	TIFR1, r26		; clear OV-Flag
    1e4c:	a8 bf       	out	0x38, r26	; 56

00001e4e <wt_rx0bs>:
  #endif
 #endif	/* BAUD_RATE > 39 */

wt_rx0bs:
 #if BAUD_RATE > 39
	ASBIC	TIFR1, TOVFLAG	; Look if time limit is reached, OV Flag
    1e4e:	08 b6       	in	r0, 0x38	; 56
    1e50:	02 fc       	sbrc	r0, 2
	rjmp	next_try		; upper limit for 2x Baud-time is reached
    1e52:	eb cf       	rjmp	.-42     	; 0x1e2a <next_try>
 #endif
 #if INVERSE_UART > 0
	ASBIS	UART_RX_PIN, UART_RX_BIT	; Look if RX is still low
 #else
	ASBIC	UART_RX_PIN, UART_RX_BIT	; Look if RX is still high
    1e54:	80 99       	sbic	0x10, 0	; 16
 #endif
	rjmp	wt_rx0bs
    1e56:	fb cf       	rjmp	.-10     	; 0x1e4e <wt_rx0bs>

00001e58 <wt_rx1bs>:
 ; Transmission of byte is not finished, we must wait for last two "0" Bits
wt_rx1bs:
 #if INVERSE_UART > 0
	ASBIC	UART_RX_PIN, UART_RX_BIT	; Look if RX is still high
 #else
	ASBIS	UART_RX_PIN, UART_RX_BIT	; Look if RX is still low
    1e58:	80 9b       	sbis	0x10, 0	; 16
 #endif
	rjmp	wt_rx1bs
    1e5a:	fe cf       	rjmp	.-4      	; 0x1e58 <wt_rx1bs>

 #if (Bits2Measure == 4) || (Bits2Measure == 9)
	AIN	r24, CNT16_CNTL		; read counter after second '0' bit is finished, 4-Bit or 9-Bit time
    1e5c:	8c b5       	in	r24, 0x2c	; 44
	AIN	r25, CNT16_CNTH
    1e5e:	9d b5       	in	r25, 0x2d	; 45
;	sbiw	r24, 28		; (four_bit_time - 28) / 32, faster selection than correct round up
;    #elif defined(__AVR_ATmega162__)
;	sbiw	r24, 19		; (four_bit_time - 19) / 32, faster selection than correct round up
;   #else
;	sbiw	r24, 16		; (four_bit_time - 16) / 32, correct round up, but many errors with CH340
	sbiw	r24, 14		; (four_bit_time - 14) / 32, slower baud than correct round up, 12 Err CH340
    1e60:	0e 97       	sbiw	r24, 0x0e	; 14
;	sbiw	r24, 12		; (four_bit_time - 14) / 32, slower baud than correct round up, 0 Err CH340, but err with FT232
;   #endif
	ldi	r28, 5		; divide by 32 is done with 5 shifts in a loop
    1e62:	c5 e0       	ldi	r28, 0x05	; 5

00001e64 <div4lop1>:
div4lop1:
	lsr	r25
    1e64:	96 95       	lsr	r25
	ror	r24
    1e66:	87 95       	ror	r24
	dec	r28
    1e68:	ca 95       	dec	r28
	brne	div4lop1
    1e6a:	e1 f7       	brne	.-8      	; 0x1e64 <div4lop1>
	ror	r24		; rotate through carry
	lsr	r25
	ror	r24		; rotate through carry
   #endif	/* CounterClockDiv */
	; now we can start the UART
	AOUT	UART_SRRH, r25
    1e6c:	90 bd       	out	0x20, r25	; 32
	AOUT	UART_SRRL, r24		; set the UART divider
    1e6e:	89 b9       	out	0x09, r24	; 9

#if SOFT_UART == 0 
 #ifdef UART_ONE_WIRE
	ldi	r24, UART_ENABLE_RX
 #else
	ldi	r24, UART_ENABLE_RX|UART_ENABLE_TX
    1e70:	88 e1       	ldi	r24, 0x18	; 24
 #endif
	AOUT	UART_SRB, r24
    1e72:	8a b9       	out	0x0a, r24	; 10
#endif

#if TEST_OUTPUT == 1
	rjmp	test_out	; output 'U'= S10101010P for speed measuring
#else
	rjmp	ver_put		;  rcall verifySpace; rjmp put_ok
    1e74:	7e c0       	rjmp	.+252    	; 0x1f72 <ver_put>

00001e76 <get_nextp>:

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
  /* Forever loop */
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
get_nextp:
	rcall	getch
    1e76:	8d d0       	rcall	.+282    	; 0x1f92 <getch>
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	cpi	r24, STK_GET_PARAMETER		; 'A' 0x41
    1e78:	81 34       	cpi	r24, 0x41	; 65
	brne	fin_get_par
    1e7a:	61 f4       	brne	.+24     	; 0x1e94 <ck_SET_DEV>
// handle get parameter instruction
	rcall	getch		; get parameter byte
    1e7c:	8a d0       	rcall	.+276    	; 0x1f92 <getch>
	mov	r21, r24	; move parameter to r21
    1e7e:	58 2f       	mov	r21, r24
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    1e80:	7d d0       	rcall	.+250    	; 0x1f7c <verifySpace>

 	ldi	r24, OPTIBOOT_MINVER	; 	
    1e82:	83 e0       	ldi	r24, 0x03	; 3
	cpi	r21, STK_SW_MINOR	; Parm_STK_SW_MINOR (0x82)
    1e84:	52 38       	cpi	r21, 0x82	; 130
	breq	to_putch	; rcall putch, rjmp put_ok
    1e86:	21 f0       	breq	.+8      	; 0x1e90 <to_putch>
	ldi	r24, 0x03	; answer generic 0x03
    1e88:	83 e0       	ldi	r24, 0x03	; 3
	cpi	r21, STK_SW_MAJOR	; Parm_STK_SW_MAJOR (0x81)
    1e8a:	51 38       	cpi	r21, 0x81	; 129
	brne	to_putch	; rcall putch, rjmp put_ok
    1e8c:	09 f4       	brne	.+2      	; 0x1e90 <to_putch>
	ldi	r24, OPTIBOOT_MAJVER+OPTIBOOT_CUSTOMVER
    1e8e:	84 e7       	ldi	r24, 0x74	; 116

00001e90 <to_putch>:
to_putch:
       	rcall	putch		; answer MINVER or MAJVER+CUSTOMVER or 0x03
    1e90:	7a d0       	rcall	.+244    	; 0x1f86 <ptch1>
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    1e92:	5c c0       	rjmp	.+184    	; 0x1f4c <put_ok>

00001e94 <ck_SET_DEV>:
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
no_read_lock:
 #endif
#endif	/* SUPPORT_READ_FUSES */
ck_SET_DEV:
	ldi	r20, 20
    1e94:	44 e1       	ldi	r20, 0x14	; 20
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
	cpi	r24, STK_SET_DEVICE		; 'B'
    1e96:	82 34       	cpi	r24, 0x42	; 66
       	breq	to_getNch	; STK set device is ignored
    1e98:	19 f0       	breq	.+6      	; 0x1ea0 <to_getNch>
	ldi	r20, 5
    1e9a:	45 e0       	ldi	r20, 0x05	; 5
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
   	cpi	r24, STK_SET_DEVICE_EXT		; 'E'
    1e9c:	85 34       	cpi	r24, 0x45	; 69
	brne	ck_LA
    1e9e:	11 f4       	brne	.+4      	; 0x1ea4 <ck_LA>

00001ea0 <to_getNch>:
; STK set device or STK set device ext is ignored
to_getNch:
	rcall	getNch		; ignore r20 count (20 or 5) parameters
    1ea0:	6a d0       	rcall	.+212    	; 0x1f76 <getNch>

00001ea2 <to_put_ok>:
to_put_ok:
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    1ea2:	54 c0       	rjmp	.+168    	; 0x1f4c <put_ok>

00001ea4 <ck_LA>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_LA:
	cpi	r24, STK_LOAD_ADDRESS		; 'U'
    1ea4:	85 35       	cpi	r24, 0x55	; 85
   	brne	ck_UNI
    1ea6:	41 f4       	brne	.+16     	; 0x1eb8 <ck_UNI>
; **** STK load address
	rcall	getch		; lower address bits
    1ea8:	74 d0       	rcall	.+232    	; 0x1f92 <getch>
	mov	r4, r24
    1eaa:	48 2e       	mov	r4, r24
	rcall	getch		; upper address bits
    1eac:	72 d0       	rcall	.+228    	; 0x1f92 <getch>
	mov	r5, r24		; r4:5 is load address
    1eae:	58 2e       	mov	r5, r24
#if defined(EEprom_ByteAddress)
	movw	ZL, r4		; save original address in r30:r31
    1eb0:	f2 01       	movw	r30, r4
#endif
	add	r4, r4		; newAddress << 1
    1eb2:	44 0c       	add	r4, r4
	adc	r5, r5		; make word address to byte address
    1eb4:	55 1c       	adc	r5, r5
	adc	r1, r1
	AOUT	RAMPZ, r1
	eor	r1, r1		; restore default zero value for r1
 #endif
#endif
	rjmp	ver_put 	; rcall verifySpace; rjmp put_ok
    1eb6:	5d c0       	rjmp	.+186    	; 0x1f72 <ver_put>

00001eb8 <ck_UNI>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_UNI:
       	cpi	r24, STK_UNIVERSAL 	; 'V'
    1eb8:	86 35       	cpi	r24, 0x56	; 86
       	brne	ck_PP
    1eba:	21 f4       	brne	.+8      	; 0x1ec4 <ck_PP>
	rcall	verifySpace
	ldi	r24,0
	rcall	putch
	rjmp	rjmp put_ok
#else
	ldi	r20, 4		; getNch(4)
    1ebc:	44 e0       	ldi	r20, 0x04	; 4
	rcall	getNch
    1ebe:	5b d0       	rcall	.+182    	; 0x1f76 <getNch>
 	ldi	r24, 0
    1ec0:	80 e0       	ldi	r24, 0x00	; 0
	rjmp	to_putch	; rcall putch, rjmp put_ok
    1ec2:	e6 cf       	rjmp	.-52     	; 0x1e90 <to_putch>

00001ec4 <ck_PP>:
#endif
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_PP:
  	cpi	r24, STK_PROG_PAGE 	; 'd'
    1ec4:	84 36       	cpi	r24, 0x64	; 100
	breq	is_PROG
    1ec6:	09 f0       	breq	.+2      	; 0x1eca <is_PROG>
	rjmp	ck_READP
    1ec8:	2e c0       	rjmp	.+92     	; 0x1f26 <ck_READP>

00001eca <is_PROG>:
#if FLASHEND > 0x1ffff
	rcall	check_mode_change
#endif
    // Check for Mode change. If other mode before, clear RAMPZ
    /* Write memory, length is big endian and is in bytes */
	rcall	get_length	; r16:r17  and r26:r27 is length, r6=r24= type-'E'
    1eca:	70 d0       	rcall	.+224    	; 0x1fac <get_length>

    // PROGRAM PAGE - we support flash and optional EEPROM programming
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
#if (NRWWSTART != 0) && (NO_EARLY_PAGE_ERASE == 0)
    	breq	no_pg_erase	; if (type) // no early page erase for EEprom
    1ecc:	21 f0       	breq	.+8      	; 0x1ed6 <no_pg_erase>
	ASBIS	WRPP_PIN,WRPP_BIT
	rjmp	no_pg_erase	; Hardware Write Protect emulation
 #endif
  ; if NRWWSTART is zero, no RWW section is present. Never erase the page
  ; at this early state.
	ldi	r24, hi8(NRWWSTART) ; 0x70
    1ece:	88 e1       	ldi	r24, 0x18	; 24
	cp	r5, r24		; lo8(NRWWSTART) is allways zero
    1ed0:	58 16       	cp	r5, r24
	brsh	no_pg_erase	; if (address < NRWWSTART)
    1ed2:	08 f4       	brcc	.+2      	; 0x1ed6 <no_pg_erase>
 // If we are in RWW section, immediately start page erase
	rcall	boot_page_erase
    1ed4:	78 d0       	rcall	.+240    	; 0x1fc6 <boot_page_erase>

00001ed6 <no_pg_erase>:
 // While that is going on, read in page contents
#endif

no_pg_erase:
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
	movw	YL, r18		; buf16Ptr (r28:r29) = RAMSTART
    1ed6:	e9 01       	movw	r28, r18

00001ed8 <fill_buf>:
fill_buf:
	rcall	getch		; call next data from serial
    1ed8:	5c d0       	rcall	.+184    	; 0x1f92 <getch>
	st	Y+, r24		; *bufPtr++ = getch()
    1eda:	89 93       	st	Y+, r24
	sbiw	r26, 1		; length = length - 1
    1edc:	11 97       	sbiw	r26, 0x01	; 1
	brne	fill_buf
    1ede:	e1 f7       	brne	.-8      	; 0x1ed8 <fill_buf>
	movw	r26, r16	; set length back to start value
    1ee0:	d8 01       	movw	r26, r16
	movw	YL, r18		; buf16Ptr (r28:r29) = RAMSTART
    1ee2:	e9 01       	movw	r28, r18

	; SRAM of ATmega is filled with data
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    1ee4:	4b d0       	rcall	.+150    	; 0x1f7c <verifySpace>
  #warning "optiboot is compiled with a write protect bit at a input pin !!!"
	ASBIS	WRPP_PIN,WRPP_BIT
	rjmp	put_ok		; Hardware Write Protect emulation
 #endif
#if SUPPORT_EEPROM > 0
	cpse	r6, r1		; r6 == 0, is EEprom write
    1ee6:	61 10       	cpse	r6, r1
	rjmp	write_flash	; if (!type)
    1ee8:	09 c0       	rjmp	.+18     	; 0x1efc <write_flash>

00001eea <ee_wrlop>:

; is EEprom write
; the address is allŕeady set in Z
ee_wrlop:
     	wdr		; watchdogReset();
    1eea:	a8 95       	wdr
	ld	r24, Y+			; *bufPtr++
    1eec:	89 91       	ld	r24, Y+
 #if VIRTUAL_BOOT_PARTITION > 0
	rcall	wr_eeprom
 #else
 /* eeprom write is done only here, therefore without a rcall to save flash */
	rcall	set_eeprom_adr	; Z+
    1eee:	58 d0       	rcall	.+176    	; 0x1fa0 <set_eeprom_adr>
	AOUT	EEDR, r24	; data to EEprom controller
    1ef0:	8d bb       	out	0x1d, r24	; 29
	ASBI	EECR, EEMPE
    1ef2:	e2 9a       	sbi	0x1c, 2	; 28
	ASBI	EECR, EEPE	; /* Start eeprom write by setting EEPE */
    1ef4:	e1 9a       	sbi	0x1c, 1	; 28
 #endif 	/* VIRTUAL_BOOT_PARTITION */

	sbiw	r26, 1		; length = length - 1
    1ef6:	11 97       	sbiw	r26, 0x01	; 1
	brne	ee_wrlop
    1ef8:	c1 f7       	brne	.-16     	; 0x1eea <ee_wrlop>
	; eeprom write is finished
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    1efa:	28 c0       	rjmp	.+80     	; 0x1f4c <put_ok>

00001efc <write_flash>:
; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
write_flash:
#if (NRWWSTART != 0) && (NO_EARLY_PAGE_ERASE == 0)
  ; If NRWWSTART is zero, boot_page_erase must be called every time here!
  ; if NO_EARLY_PAGE_ERASE is set, the page is never erased before data input , programming is slow!
	ldi	r24, hi8(NRWWSTART) ; 0x70
    1efc:	88 e1       	ldi	r24, 0x18	; 24
	cp	r5, r24			; hi8(NRWWSTART) lo8(NRWWSTART) is allways zero
    1efe:	58 16       	cp	r5, r24
	brlo	no_erase1
    1f00:	08 f0       	brcs	.+2      	; 0x1f04 <no_erase1>
        // Todo: Take RAMPZ into account (not doing so just means that we will
        //  treat the top of both "pages" of flash as NRWW, for a slight speed
        //  decrease, so fixing this is not urgent.)
#endif

	rcall	boot_page_erase
    1f02:	61 d0       	rcall	.+194    	; 0x1fc6 <boot_page_erase>

00001f04 <no_erase1>:
no_erase1:
        // If only a partial page is to be programmed, the erase might not be complete.
        // So check that here
	rcall	wait_flash_ready
    1f04:	5c d0       	rcall	.+184    	; 0x1fbe <wait_flash_ready>
no_patch1:
#endif		/* VIRTUAL_BOOT_PARTITION */

;     Fill the programming buffer
;     ---------------------------
	movw	ZL, r4		; addrPtr = address
    1f06:	f2 01       	movw	r30, r4

00001f08 <wr_lop1>:
#if FLASHEND > 0x1ffff
	AIN	r21, RAMPZ	; save old RAMPZ
#endif
;	buf16Ptr (r28:r29) = RAMSTART
wr_lop1:
    	ld	r0, Y+		; *buf16Ptr++
    1f08:	09 90       	ld	r0, Y+
	ld	r1, Y+
    1f0a:	19 90       	ld	r1, Y+
	ldi	r20, (1<<SELFPRGEN)
    1f0c:	41 e0       	ldi	r20, 0x01	; 1
	; r0:r1 is data, Z r30:r31 is address, probably RAMPZ is also set
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    1f0e:	5d d0       	rcall	.+186    	; 0x1fca <do_spm>
	eor	r1, r1
    1f10:	11 24       	eor	r1, r1
	adiw	ZL, 2		; increment address
    1f12:	32 96       	adiw	r30, 0x02	; 2
#if FLASHEND > 0x1ffff
	adc	r21, r1		; increment the RAMPZ content
#endif
	sbiw	r26, 2		; length = length - 2
    1f14:	12 97       	sbiw	r26, 0x02	; 2
	brne	wr_lop1
    1f16:	c1 f7       	brne	.-16     	; 0x1f08 <wr_lop1>

	movw	ZL, r4		; addrPtr = address
    1f18:	f2 01       	movw	r30, r4
#if defined(__AVR_ATtiny48__) || defined(__AVR_ATtiny88__)
	andi	ZL, 0xc0	; make shure a zero Z5:1 for ATtiny48/88, 64 Byte Flash
#endif
        // Write from programming buffer
        // -----------------------------
	ldi	r20, (1<<PGWRT)|(1<<SELFPRGEN)	; 0x05	
    1f1a:	45 e0       	ldi	r20, 0x05	; 5
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    1f1c:	56 d0       	rcall	.+172    	; 0x1fca <do_spm>
	rcall	wait_flash_ready
    1f1e:	4f d0       	rcall	.+158    	; 0x1fbe <wait_flash_ready>
#if defined(RWWSRE)
       // Reenable read access to flash
	ldi	r20, (1<<RWWSRE)|(1<<SELFPRGEN)	; 0x11	
    1f20:	41 e1       	ldi	r20, 0x11	; 17
	rcall	do_spm		; AOUT SPMCSR, r20 ; spm
    1f22:	53 d0       	rcall	.+166    	; 0x1fca <do_spm>
	rcall	wr_eeprom
        ; Now we have saved the original save_vector address to the last two EEproms.
	; The save_vector has now the original address from the reset vector and
	; the reset vector now jmp to the bootloader.
#endif
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    1f24:	13 c0       	rjmp	.+38     	; 0x1f4c <put_ok>

00001f26 <ck_READP>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_READP:
      	cpi	r24, STK_READ_PAGE	; 't'
    1f26:	84 37       	cpi	r24, 0x74	; 116
	brne   	ck_READS
    1f28:	a1 f4       	brne	.+40     	; 0x1f52 <ck_READS>
#if FLASHEND > 0x1ffff
	rcall	check_mode_change
#endif
    /* Read memory block mode, length is big endian.  */
	rcall	get_length	; r16:r17  and r26:r27 is length, r6=r24= type-'E'
    1f2a:	40 d0       	rcall	.+128    	; 0x1fac <get_length>
     // READ PAGE - we only read flash and optional EEPROM
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    1f2c:	27 d0       	rcall	.+78     	; 0x1f7c <verifySpace>
;	TODO: putNch()

#if SUPPORT_EEPROM > 0
	tst	r6		; check if type was 'E'
    1f2e:	66 20       	and	r6, r6
	brne	flash_read
    1f30:	39 f4       	brne	.+14     	; 0x1f40 <flash_read>

00001f32 <ee_rd_lop2>:
;     must be EEprom read
; read EEprom, the Address is allready set in Z
ee_rd_lop2:
	sbiw	r26, 1		; length-1
    1f32:	11 97       	sbiw	r26, 0x01	; 1
	brcs	next_adr_put_ok	;
    1f34:	50 f0       	brcs	.+20     	; 0x1f4a <next_adr_put_ok>
 #if VIRTUAL_BOOT_PARTITION > 0
	rcall	rd_eeprom	; Z+
 #else
  /* EEprom read is only required here without the VIRTUAL_BOOT_PARTITION */
  /* Therefore is is used without a rcall directly                        */
	rcall 	set_eeprom_adr	; Z+
    1f36:	34 d0       	rcall	.+104    	; 0x1fa0 <set_eeprom_adr>
	ASBI	EECR, EERE
    1f38:	e0 9a       	sbi	0x1c, 0	; 28
	AIN	r24, EEDR		; read data from EEprom
    1f3a:	8d b3       	in	r24, 0x1d	; 29
 #endif
	rcall	putch
    1f3c:	24 d0       	rcall	.+72     	; 0x1f86 <ptch1>
	rjmp	ee_rd_lop2
    1f3e:	f9 cf       	rjmp	.-14     	; 0x1f32 <ee_rd_lop2>

00001f40 <flash_read>:
#endif

; - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
;	read flash
flash_read:
	movw	ZL, r4		; Z = addrPtr = address
    1f40:	f2 01       	movw	r30, r4

00001f42 <flash_rd_lop>:
          //      do putch(pgm_read_byte_near(address++));
          //      while (--length);
          // read a Flash and increment the address (may increment RAMPZ)
	elpm	r24, Z+
#else
	lpm	r24, Z+
    1f42:	85 91       	lpm	r24, Z+
	mov	r21, r25	; save second byte
	rcall	putch
	mov	r24, r21
#endif		/* VIRTUAL_BOOT_PARTITION */

	rcall	putch
    1f44:	20 d0       	rcall	.+64     	; 0x1f86 <ptch1>
	sbiw	r26, LenDecrement	; length - 1 or 2 bytes for VIRTUAL_BOOT_PARTITION
    1f46:	11 97       	sbiw	r26, 0x01	; 1
	brne	flash_rd_lop
    1f48:	e1 f7       	brne	.-8      	; 0x1f42 <flash_rd_lop>

00001f4a <next_adr_put_ok>:
next_adr_put_ok:
	movw	r4, ZL		; new address  ???
    1f4a:	2f 01       	movw	r4, r30

00001f4c <put_ok>:
put_ok:
     	ldi	r24, STK_OK	; 0x10
    1f4c:	80 e1       	ldi	r24, 0x10	; 16
       	rcall	putch
    1f4e:	1b d0       	rcall	.+54     	; 0x1f86 <ptch1>

00001f50 <to_get_nextp>:
to_get_nextp:
       	rjmp	get_nextp
    1f50:	92 cf       	rjmp	.-220    	; 0x1e76 <get_nextp>

00001f52 <ck_READS>:

;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_READS:
     	cpi	r24, STK_READ_SIGN	; 'u'
    1f52:	85 37       	cpi	r24, 0x75	; 117
	brne	ck_EOP
    1f54:	41 f4       	brne	.+16     	; 0x1f66 <ck_EOP>
	brne	ck_LEAVE
    1f56:	49 f4       	brne	.+18     	; 0x1f6a <ck_LEAVE>
;	READ SIGN - return what Avrdude wants to hear
	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    1f58:	11 d0       	rcall	.+34     	; 0x1f7c <verifySpace>
	ldi	r24, SIGNATURE_0
    1f5a:	8e e1       	ldi	r24, 0x1E	; 30
	rcall	putch
    1f5c:	14 d0       	rcall	.+40     	; 0x1f86 <ptch1>
	ldi	r24, SIGNATURE_1
    1f5e:	83 e9       	ldi	r24, 0x93	; 147
	rcall	putch
    1f60:	12 d0       	rcall	.+36     	; 0x1f86 <ptch1>
	ldi	r24, SIGNATURE_2
    1f62:	87 e0       	ldi	r24, 0x07	; 7
	rjmp	to_putch	; rcall putch, rjmp put_ok
    1f64:	95 cf       	rjmp	.-214    	; 0x1e90 <to_putch>

00001f66 <ck_EOP>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_EOP:
			; avrdude send a STK_GET_SYNC followed by CRC_EOP
			; if the STK_GET_SYNC is loose out, the CRC_EOP is detected as last character
	cpi	r24, CRC_EOP			; ' ' 0x20
    1f66:	80 32       	cpi	r24, 0x20	; 32
	breq	to_get_nextp			; wait for next STK_GET_SYNC
    1f68:	99 f3       	breq	.-26     	; 0x1f50 <to_get_nextp>

00001f6a <ck_LEAVE>:
;=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
ck_LEAVE:
      	cpi	r24, STK_LEAVE_PROGMODE	; 'Q'
    1f6a:	81 35       	cpi	r24, 0x51	; 81
	brne	ver_put
    1f6c:	11 f4       	brne	.+4      	; 0x1f72 <ver_put>
;  Adaboot no wait mod
	ldi	r20, WATCHDOG_16MS	; 0x08
    1f6e:	48 e0       	ldi	r20, 0x08	; 8
	rcall	watchdogConfig
    1f70:	2f d0       	rcall	.+94     	; 0x1fd0 <watchdogConfig>

00001f72 <ver_put>:
ver_put:
     	rcall	verifySpace	; check Sync_CRC_EOP, putch(STK_INSYNC)
    1f72:	04 d0       	rcall	.+8      	; 0x1f7c <verifySpace>
	rjmp	put_ok		; putch(STK_OK); rjmp get_nextp
    1f74:	eb cf       	rjmp	.-42     	; 0x1f4c <put_ok>

00001f76 <getNch>:
;**********************************************************
; read r20 count character from serial input and look if space follow
getNch:		; call  getNch, r20 = count
	; repeat count times "call getch"
repeat_g:
     	rcall	getch		; do getch(); while (--count);
    1f76:	0d d0       	rcall	.+26     	; 0x1f92 <getch>
       	subi	r20, 1		; count - 1
    1f78:	41 50       	subi	r20, 0x01	; 1
     	brne	repeat_g
    1f7a:	e9 f7       	brne	.-6      	; 0x1f76 <getNch>

00001f7c <verifySpace>:

;**********************************************************
; look if a space character can be read from serial input and answer
verifySpace:		/* void verifySpace(void) { */
; use of r24,
     	rcall	getch		; if (getch() != CRC_EOP)
    1f7c:	0a d0       	rcall	.+20     	; 0x1f92 <getch>
       	cpi	r24, CRC_EOP	; 0x20
    1f7e:	80 32       	cpi	r24, 0x20	; 32
       	breq	no_to
    1f80:	09 f0       	breq	.+2      	; 0x1f84 <no_to>
     	rcall	wait_timeout		;wait_timeout();
    1f82:	2a d0       	rcall	.+84     	; 0x1fd8 <wait_timeout>

00001f84 <no_to>:
no_to:
       	ldi	r24, STK_INSYNC
    1f84:	84 e1       	ldi	r24, 0x14	; 20

00001f86 <ptch1>:
	AOUT	UART_SRB, r25		; enable UART input
 #else
	/* For normal serial transfer we wait until the buffer UDR is free. */
	/* After loading the buffer we return immediately to caller */
ptch1:
	AIN	r25, UART_STATUS	; while (!(UART_SRA & _BV(UDRE0)));
    1f86:	9b b1       	in	r25, 0x0b	; 11
  #if UART_STATUS == LINSIR
	andi	r25, (1<<LBUSY)|(1<<LTXOK)
	cpi	r25, (1<<LBUSY)	
	breq	ptch1		; wait if LBUSY and !LTXOK
  #else
      	sbrs	r25, UDRE0
    1f88:	95 ff       	sbrs	r25, 5
      	rjmp	ptch1		; wait, UART out not ready
    1f8a:	fd cf       	rjmp	.-6      	; 0x1f86 <ptch1>
  #endif
 #endif
	AOUT	UART_UDR, r24	; UART_UDR = ch;
    1f8c:	8c b9       	out	0x0c, r24	; 12
 #if ((LED_DATA_FLASH & 0x02) > 0) && defined(LED_PORT) && defined(LEDbit)
	ACBI	LED_PORT, LEDbit
 #endif
	wdr		; watchdogReset(); /* prevent watch dog timeout during slow serial output */
    1f8e:	a8 95       	wdr
      	ret
    1f90:	08 95       	ret

00001f92 <getch>:
getch: 
 #if ((LED_DATA_FLASH & 0x01) > 0) && defined(LED_PORT) && defined(LEDbit)
	ASBI	LED_PORT, LEDbit
 #endif
gtch1:
	AIN	r24, UART_STATUS	; if (UART_SRA & _BV(RXC0)) {
    1f92:	8b b1       	in	r24, 0x0b	; 11
     	sbrs	r24, RXC0
    1f94:	87 ff       	sbrs	r24, 7
       	rjmp	gtch1			; no data received, wait
    1f96:	fd cf       	rjmp	.-6      	; 0x1f92 <getch>
#if UART_STATUS != UART_ERRSTAT
	AIN	r24, UART_ERRSTAT
#endif
      	sbrs	r24, FE0		; if (!(UART_SRA & _BV(FE0))) {
    1f98:	84 ff       	sbrs	r24, 4
     	wdr		; watchdogReset();
    1f9a:	a8 95       	wdr
         * watchdog.  This should cause the bootloader to abort and run
         * the application "soon", if it keeps happening.  (Note that we
         * don't care that an invalid char is returned...)
         */

 	AIN	r24, UART_UDR	; ch = UART_UDR; return ch;
    1f9c:	8c b1       	in	r24, 0x0c	; 12
 #if ((LED_DATA_FLASH & 0x01) > 0) && defined(LED_PORT) && defined(LEDbit)
	ACBI	LED_PORT, LEDbit
 #endif
       	ret
    1f9e:	08 95       	ret

00001fa0 <set_eeprom_adr>:
;**********************************************************
#if (VIRTUAL_BOOT_PARTITION > 0) || defined(SUPPORT_EEPROM)
/* Z hold the eeprom address, which is loaded to EEAR and afterwards increased by 1 */
/* ASBIC can destroy content of register r0 */
set_eeprom_adr:
  	ASBIC	EECR, EEPE	; while (!eeprom_is_ready())
    1fa0:	e1 99       	sbic	0x1c, 1	; 28
   	rjmp	set_eeprom_adr	; wait
    1fa2:	fe cf       	rjmp	.-4      	; 0x1fa0 <set_eeprom_adr>
;	rcall	wait_flash_ready

 #ifdef EEARH
	AOUT	EEARH, ZH	; EEAR = addrPtr++
    1fa4:	ff bb       	out	0x1f, r31	; 31
 #endif
	AOUT	EEARL, ZL
    1fa6:	ee bb       	out	0x1e, r30	; 30
	adiw	ZL, 1
    1fa8:	31 96       	adiw	r30, 0x01	; 1
	ret			; set_eeprom_adr
    1faa:	08 95       	ret

00001fac <get_length>:
;	result is r26:r27 = r16:r17  last:first byte
;	use r22, r25 (soft)
;	additional result is r6 = r24 = type  - 'E' 
;	zero-Flag is set, if type is 'E' (with SUPPORT_EEPROM)
get_length:
	rcall	getch
    1fac:	f2 df       	rcall	.-28     	; 0x1f92 <getch>
	mov	r17, r24	; r17 = upper bits of length
    1fae:	18 2f       	mov	r17, r24
	rcall	getch
    1fb0:	f0 df       	rcall	.-32     	; 0x1f92 <getch>
	mov	r16, r24	; r16 = lower bits of length
    1fb2:	08 2f       	mov	r16, r24
	movw	r26, r16	; can be changed by sbiw or adiw
    1fb4:	d8 01       	movw	r26, r16
	rcall	getch		; read in type
    1fb6:	ed df       	rcall	.-38     	; 0x1f92 <getch>
//#if SUPPORT_EEPROM > 0
	subi	r24, 'E'	; type = getch() - 'E'
    1fb8:	85 54       	subi	r24, 0x45	; 69
	mov	r6, r24
    1fba:	68 2e       	mov	r6, r24
//#endif
	ret
    1fbc:	08 95       	ret

00001fbe <wait_flash_ready>:

;**********************************************************
;	call wait_flash_ready wait for a idle Flash controller
;	use r0
wait_flash_ready:
       	AIN	r0, SPMCSR 
    1fbe:	07 b6       	in	r0, 0x37	; 55
	sbrc	r0, SELFPRGEN
    1fc0:	00 fc       	sbrc	r0, 0
	rjmp	wait_flash_ready
    1fc2:	fd cf       	rjmp	.-6      	; 0x1fbe <wait_flash_ready>
	ret
    1fc4:	08 95       	ret

00001fc6 <boot_page_erase>:
;	r20 is used to setup the spm instruction
;	probably RAMPZ must be set before to extend the r4:r5 address
;	return is immediately, the flash controller is probably still busy
boot_page_erase:
;	rcall	wait_flash_ready
    	movw	ZL, r4		; __boot_page_erase_short((uint16_t)(void*)address)
    1fc6:	f2 01       	movw	r30, r4
   #endif
  #endif
	and	r20, r4
	brne	no_erase4	; not a fourth page
 #endif
	ldi	r20, (1<<PGERS)|(1<<SELFPRGEN)	; 0x03
    1fc8:	43 e0       	ldi	r20, 0x03	; 3

00001fca <do_spm>:
do_spm:
	AOUT	SPMCSR, r20	; (1<<PGERS)|(SELFPRGEN)
    1fca:	47 bf       	out	0x37, r20	; 55
	spm
    1fcc:	e8 95       	spm

00001fce <no_erase4>:
;	special handling of spm for ATmega163 and ATmega323
	.word	0xffff
	nop
#endif
no_erase4:
	ret
    1fce:	08 95       	ret

00001fd0 <watchdogConfig>:
watchdogConfig: 
#ifndef WDTCSR
 #define WDTCSR  WDTCR
#endif
#if defined(WDCE)
    	ldi	r21, (1<<WDCE) | (1<<WDE)	; 0x18
    1fd0:	58 e1       	ldi	r21, 0x18	; 24
	AOUT	WDTCSR, r21	; (1<<WDCE) | (1<<WDE) ; watchdogConfig(x);
    1fd2:	51 bd       	out	0x21, r21	; 33
 #else
    	ldi	r21, (1<<WDE)	; 0x08
	AOUT	WDTCSR, r21	; (1<<WDE) ; watchdogConfig(x);
 #endif
#endif
       	AOUT	WDTCSR, r20		; WDTCSR = x;
    1fd4:	41 bd       	out	0x21, r20	; 33
       	ret
    1fd6:	08 95       	ret

00001fd8 <wait_timeout>:
#endif		/* LED_FLASHES */

;**********************************************************
;	rcall wait_timeout  set the watch dog timer to 16ms and wait for reset
wait_timeout:
     	ldi	r20, WATCHDOG_16MS
    1fd8:	48 e0       	ldi	r20, 0x08	; 8
	rcall	watchdogConfig	;  watchdogConfig(WATCHDOG_16MS) 
    1fda:	fa df       	rcall	.-12     	; 0x1fd0 <watchdogConfig>

00001fdc <lop77>:
lop77:
    	rjmp	lop77		; endless loop, watch Dog will reset!
    1fdc:	ff cf       	rjmp	.-2      	; 0x1fdc <lop77>
; 
; FORCE_WATCHDOG=
; LED_START_FLASHES=0
; LED_DATA_FLASH=
; LED=
; UART=0
; SOURCE_TYPE=S
; SUPPORT_EEPROM=1
; MCU_TARGET = atmega8
; AVR_FREQ= 16000000
; BAUD_RATE=56
